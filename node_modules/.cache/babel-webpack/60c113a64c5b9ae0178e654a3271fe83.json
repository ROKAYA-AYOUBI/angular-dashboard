{"ast":null,"code":"module.exports = function (_list) {\n  var item, text, columns, searchString, customSearch;\n  var prepare = {\n    resetList: function resetList() {\n      _list.i = 1;\n\n      _list.templater.clear();\n\n      customSearch = undefined;\n    },\n    setOptions: function setOptions(args) {\n      if (args.length == 2 && args[1] instanceof Array) {\n        columns = args[1];\n      } else if (args.length == 2 && typeof args[1] == 'function') {\n        columns = undefined;\n        customSearch = args[1];\n      } else if (args.length == 3) {\n        columns = args[1];\n        customSearch = args[2];\n      } else {\n        columns = undefined;\n      }\n    },\n    setColumns: function setColumns() {\n      if (_list.items.length === 0) return;\n\n      if (columns === undefined) {\n        columns = _list.searchColumns === undefined ? prepare.toArray(_list.items[0].values()) : _list.searchColumns;\n      }\n    },\n    setSearchString: function setSearchString(s) {\n      s = _list.utils.toString(s).toLowerCase();\n      s = s.replace(/[-[\\]{}()*+?.,\\\\^$|#]/g, '\\\\$&'); // Escape regular expression characters\n\n      searchString = s;\n    },\n    toArray: function toArray(values) {\n      var tmpColumn = [];\n\n      for (var name in values) {\n        tmpColumn.push(name);\n      }\n\n      return tmpColumn;\n    }\n  };\n  var search = {\n    list: function list() {\n      // Extract quoted phrases \"word1 word2\" from original searchString\n      // searchString is converted to lowercase by List.js\n      var words = [],\n          phrase,\n          ss = searchString;\n\n      while ((phrase = ss.match(/\"([^\"]+)\"/)) !== null) {\n        words.push(phrase[1]);\n        ss = ss.substring(0, phrase.index) + ss.substring(phrase.index + phrase[0].length);\n      } // Get remaining space-separated words (if any)\n\n\n      ss = ss.trim();\n      if (ss.length) words = words.concat(ss.split(/\\s+/));\n\n      for (var k = 0, kl = _list.items.length; k < kl; k++) {\n        var item = _list.items[k];\n        item.found = false;\n        if (!words.length) continue;\n\n        for (var i = 0, il = words.length; i < il; i++) {\n          var word_found = false;\n\n          for (var j = 0, jl = columns.length; j < jl; j++) {\n            var values = item.values(),\n                column = columns[j];\n\n            if (values.hasOwnProperty(column) && values[column] !== undefined && values[column] !== null) {\n              var text = typeof values[column] !== 'string' ? values[column].toString() : values[column];\n\n              if (text.toLowerCase().indexOf(words[i]) !== -1) {\n                // word found, so no need to check it against any other columns\n                word_found = true;\n                break;\n              }\n            }\n          } // this word not found? no need to check any other words, the item cannot match\n\n\n          if (!word_found) break;\n        }\n\n        item.found = word_found;\n      }\n    },\n    // Removed search.item() and search.values()\n    reset: function reset() {\n      _list.reset.search();\n\n      _list.searched = false;\n    }\n  };\n\n  var searchMethod = function searchMethod(str) {\n    _list.trigger('searchStart');\n\n    prepare.resetList();\n    prepare.setSearchString(str);\n    prepare.setOptions(arguments); // str, cols|searchFunction, searchFunction\n\n    prepare.setColumns();\n\n    if (searchString === '') {\n      search.reset();\n    } else {\n      _list.searched = true;\n\n      if (customSearch) {\n        customSearch(searchString, columns);\n      } else {\n        search.list();\n      }\n    }\n\n    _list.update();\n\n    _list.trigger('searchComplete');\n\n    return _list.visibleItems;\n  };\n\n  _list.handlers.searchStart = _list.handlers.searchStart || [];\n  _list.handlers.searchComplete = _list.handlers.searchComplete || [];\n\n  _list.utils.events.bind(_list.utils.getByClass(_list.listContainer, _list.searchClass), 'keyup', _list.utils.events.debounce(function (e) {\n    var target = e.target || e.srcElement,\n        // IE have srcElement\n    alreadyCleared = target.value === '' && !_list.searched;\n\n    if (!alreadyCleared) {\n      // If oninput already have resetted the list, do nothing\n      searchMethod(target.value);\n    }\n  }, _list.searchDelay)); // Used to detect click on HTML5 clear button\n\n\n  _list.utils.events.bind(_list.utils.getByClass(_list.listContainer, _list.searchClass), 'input', function (e) {\n    var target = e.target || e.srcElement;\n\n    if (target.value === '') {\n      searchMethod('');\n    }\n  });\n\n  return searchMethod;\n};","map":null,"metadata":{},"sourceType":"script"}