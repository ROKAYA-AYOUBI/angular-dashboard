{"ast":null,"code":"var Templater = function Templater(list) {\n  var createItem,\n      templater = this;\n\n  var init = function init() {\n    var itemSource;\n\n    if (typeof list.item === 'function') {\n      createItem = function createItem(values) {\n        var item = list.item(values);\n        return getItemSource(item);\n      };\n\n      return;\n    }\n\n    if (typeof list.item === 'string') {\n      if (list.item.indexOf('<') === -1) {\n        itemSource = document.getElementById(list.item);\n      } else {\n        itemSource = getItemSource(list.item);\n      }\n    } else {\n      /* If item source does not exists, use the first item in list as\n      source for new items */\n      itemSource = getFirstListItem();\n    }\n\n    if (!itemSource) {\n      throw new Error(\"The list needs to have at least one item on init otherwise you'll have to add a template.\");\n    }\n\n    itemSource = createCleanTemplateItem(itemSource, list.valueNames);\n\n    createItem = function createItem() {\n      return itemSource.cloneNode(true);\n    };\n  };\n\n  var createCleanTemplateItem = function createCleanTemplateItem(templateNode, valueNames) {\n    var el = templateNode.cloneNode(true);\n    el.removeAttribute('id');\n\n    for (var i = 0, il = valueNames.length; i < il; i++) {\n      var elm = undefined,\n          valueName = valueNames[i];\n\n      if (valueName.data) {\n        for (var j = 0, jl = valueName.data.length; j < jl; j++) {\n          el.setAttribute('data-' + valueName.data[j], '');\n        }\n      } else if (valueName.attr && valueName.name) {\n        elm = list.utils.getByClass(el, valueName.name, true);\n\n        if (elm) {\n          elm.setAttribute(valueName.attr, '');\n        }\n      } else {\n        elm = list.utils.getByClass(el, valueName, true);\n\n        if (elm) {\n          elm.innerHTML = '';\n        }\n      }\n    }\n\n    return el;\n  };\n\n  var getFirstListItem = function getFirstListItem() {\n    var nodes = list.list.childNodes;\n\n    for (var i = 0, il = nodes.length; i < il; i++) {\n      // Only textnodes have a data attribute\n      if (nodes[i].data === undefined) {\n        return nodes[i].cloneNode(true);\n      }\n    }\n\n    return undefined;\n  };\n\n  var getItemSource = function getItemSource(itemHTML) {\n    if (typeof itemHTML !== 'string') return undefined;\n\n    if (/<tr[\\s>]/g.exec(itemHTML)) {\n      var tbody = document.createElement('tbody');\n      tbody.innerHTML = itemHTML;\n      return tbody.firstElementChild;\n    } else if (itemHTML.indexOf('<') !== -1) {\n      var div = document.createElement('div');\n      div.innerHTML = itemHTML;\n      return div.firstElementChild;\n    }\n\n    return undefined;\n  };\n\n  var getValueName = function getValueName(name) {\n    for (var i = 0, il = list.valueNames.length; i < il; i++) {\n      var valueName = list.valueNames[i];\n\n      if (valueName.data) {\n        var data = valueName.data;\n\n        for (var j = 0, jl = data.length; j < jl; j++) {\n          if (data[j] === name) {\n            return {\n              data: name\n            };\n          }\n        }\n      } else if (valueName.attr && valueName.name && valueName.name == name) {\n        return valueName;\n      } else if (valueName === name) {\n        return name;\n      }\n    }\n  };\n\n  var setValue = function setValue(item, name, value) {\n    var elm = undefined,\n        valueName = getValueName(name);\n    if (!valueName) return;\n\n    if (valueName.data) {\n      item.elm.setAttribute('data-' + valueName.data, value);\n    } else if (valueName.attr && valueName.name) {\n      elm = list.utils.getByClass(item.elm, valueName.name, true);\n\n      if (elm) {\n        elm.setAttribute(valueName.attr, value);\n      }\n    } else {\n      elm = list.utils.getByClass(item.elm, valueName, true);\n\n      if (elm) {\n        elm.innerHTML = value;\n      }\n    }\n  };\n\n  this.get = function (item, valueNames) {\n    templater.create(item);\n    var values = {};\n\n    for (var i = 0, il = valueNames.length; i < il; i++) {\n      var elm = undefined,\n          valueName = valueNames[i];\n\n      if (valueName.data) {\n        for (var j = 0, jl = valueName.data.length; j < jl; j++) {\n          values[valueName.data[j]] = list.utils.getAttribute(item.elm, 'data-' + valueName.data[j]);\n        }\n      } else if (valueName.attr && valueName.name) {\n        elm = list.utils.getByClass(item.elm, valueName.name, true);\n        values[valueName.name] = elm ? list.utils.getAttribute(elm, valueName.attr) : '';\n      } else {\n        elm = list.utils.getByClass(item.elm, valueName, true);\n        values[valueName] = elm ? elm.innerHTML : '';\n      }\n    }\n\n    return values;\n  };\n\n  this.set = function (item, values) {\n    if (!templater.create(item)) {\n      for (var v in values) {\n        if (values.hasOwnProperty(v)) {\n          setValue(item, v, values[v]);\n        }\n      }\n    }\n  };\n\n  this.create = function (item) {\n    if (item.elm !== undefined) {\n      return false;\n    }\n\n    item.elm = createItem(item.values());\n    templater.set(item, item.values());\n    return true;\n  };\n\n  this.remove = function (item) {\n    if (item.elm.parentNode === list.list) {\n      list.list.removeChild(item.elm);\n    }\n  };\n\n  this.show = function (item) {\n    templater.create(item);\n    list.list.appendChild(item.elm);\n  };\n\n  this.hide = function (item) {\n    if (item.elm !== undefined && item.elm.parentNode === list.list) {\n      list.list.removeChild(item.elm);\n    }\n  };\n\n  this.clear = function () {\n    /* .innerHTML = ''; fucks up IE */\n    if (list.list.hasChildNodes()) {\n      while (list.list.childNodes.length >= 1) {\n        list.list.removeChild(list.list.firstChild);\n      }\n    }\n  };\n\n  init();\n};\n\nmodule.exports = function (list) {\n  return new Templater(list);\n};","map":null,"metadata":{},"sourceType":"script"}