{"ast":null,"code":"import _classCallCheck from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { forwardRef, ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, HostListener, ContentChildren, QueryList, Component, NgModule } from '@angular/core';\nimport DxHtmlEditor from 'devextreme/ui/html_editor';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiMentionComponent, DxoMediaResizingModule, DxiMentionModule, DxoTableContextMenuModule, DxiItemModule, DxoTableResizingModule, DxoToolbarModule, DxoVariablesModule } from 'devextreme-angular/ui/nested';\n/*!\n * devextreme-angular\n * Version: 21.2.6\n * Build date: Tue Mar 01 2022\n *\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-angular\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'devextreme-angular/core';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar _c0 = [\"*\"];\nvar CUSTOM_VALUE_ACCESSOR_PROVIDER = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return DxHtmlEditorComponent;\n  }),\n  multi: true\n};\n\nvar DxHtmlEditorComponent = /*@__PURE__*/function () {\n  /**\n   * HtmlEditor is a WYSIWYG editor that allows you to format textual and visual content and to output it in HTML or Markdown. HtmlEditor is built on top of and requires the DevExtreme Quill.\n  \n   */\n  var DxHtmlEditorComponent = /*#__PURE__*/function (_DxComponent) {\n    _inherits(DxHtmlEditorComponent, _DxComponent);\n\n    var _super = _createSuper(DxHtmlEditorComponent);\n\n    function DxHtmlEditorComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      var _this;\n\n      _classCallCheck(this, DxHtmlEditorComponent);\n\n      _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      _this._watcherHelper = _watcherHelper;\n      _this._idh = _idh;\n\n      _this.touched = function (_) {};\n\n      _this._createEventEmitters([{\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'focusIn',\n        emit: 'onFocusIn'\n      }, {\n        subscribe: 'focusOut',\n        emit: 'onFocusOut'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'valueChanged',\n        emit: 'onValueChanged'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'allowSoftLineBreakChange'\n      }, {\n        emit: 'customizeModulesChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'isValidChange'\n      }, {\n        emit: 'mediaResizingChange'\n      }, {\n        emit: 'mentionsChange'\n      }, {\n        emit: 'nameChange'\n      }, {\n        emit: 'placeholderChange'\n      }, {\n        emit: 'readOnlyChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'stylingModeChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'tableContextMenuChange'\n      }, {\n        emit: 'tableResizingChange'\n      }, {\n        emit: 'toolbarChange'\n      }, {\n        emit: 'validationErrorChange'\n      }, {\n        emit: 'validationErrorsChange'\n      }, {\n        emit: 'validationMessageModeChange'\n      }, {\n        emit: 'validationStatusChange'\n      }, {\n        emit: 'valueChange'\n      }, {\n        emit: 'valueTypeChange'\n      }, {\n        emit: 'variablesChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }, {\n        emit: 'onBlur'\n      }]);\n\n      _this._idh.setHost(_assertThisInitialized(_this));\n\n      optionHost.setHost(_assertThisInitialized(_this));\n      return _this;\n    }\n    /**\n     * Specifies the shortcut key that sets focus on the UI component.\n    \n     */\n\n\n    _createClass(DxHtmlEditorComponent, [{\n      key: \"accessKey\",\n      get: function get() {\n        return this._getOption('accessKey');\n      },\n      set: function set(value) {\n        this._setOption('accessKey', value);\n      }\n      /**\n       * Specifies whether or not the UI component changes its state when interacting with a user.\n      \n       */\n\n    }, {\n      key: \"activeStateEnabled\",\n      get: function get() {\n        return this._getOption('activeStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('activeStateEnabled', value);\n      }\n      /**\n       * Allows users to break content into multiple lines within a single block element. The Shift + Enter key combination generates the new line.\n      \n       */\n\n    }, {\n      key: \"allowSoftLineBreak\",\n      get: function get() {\n        return this._getOption('allowSoftLineBreak');\n      },\n      set: function set(value) {\n        this._setOption('allowSoftLineBreak', value);\n      }\n      /**\n       * Allows you to customize the DevExtreme Quill and 3rd-party modules.\n      \n       */\n\n    }, {\n      key: \"customizeModules\",\n      get: function get() {\n        return this._getOption('customizeModules');\n      },\n      set: function set(value) {\n        this._setOption('customizeModules', value);\n      }\n      /**\n       * Specifies whether the UI component responds to user interaction.\n      \n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._getOption('disabled');\n      },\n      set: function set(value) {\n        this._setOption('disabled', value);\n      }\n      /**\n       * Specifies the global attributes to be attached to the UI component&apos;s container element.\n      \n       */\n\n    }, {\n      key: \"elementAttr\",\n      get: function get() {\n        return this._getOption('elementAttr');\n      },\n      set: function set(value) {\n        this._setOption('elementAttr', value);\n      }\n      /**\n       * Specifies whether the UI component can be focused using keyboard navigation.\n      \n       */\n\n    }, {\n      key: \"focusStateEnabled\",\n      get: function get() {\n        return this._getOption('focusStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('focusStateEnabled', value);\n      }\n      /**\n       * Specifies the UI component&apos;s height.\n      \n       */\n\n    }, {\n      key: \"height\",\n      get: function get() {\n        return this._getOption('height');\n      },\n      set: function set(value) {\n        this._setOption('height', value);\n      }\n      /**\n       * Specifies text for a hint that appears when a user pauses on the UI component.\n      \n       */\n\n    }, {\n      key: \"hint\",\n      get: function get() {\n        return this._getOption('hint');\n      },\n      set: function set(value) {\n        this._setOption('hint', value);\n      }\n      /**\n       * Specifies whether the UI component changes its state when a user pauses on it.\n      \n       */\n\n    }, {\n      key: \"hoverStateEnabled\",\n      get: function get() {\n        return this._getOption('hoverStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('hoverStateEnabled', value);\n      }\n      /**\n       * Specifies or indicates whether the editor&apos;s value is valid.\n      \n       */\n\n    }, {\n      key: \"isValid\",\n      get: function get() {\n        return this._getOption('isValid');\n      },\n      set: function set(value) {\n        this._setOption('isValid', value);\n      }\n      /**\n       * Configures media resizing.\n      \n       */\n\n    }, {\n      key: \"mediaResizing\",\n      get: function get() {\n        return this._getOption('mediaResizing');\n      },\n      set: function set(value) {\n        this._setOption('mediaResizing', value);\n      }\n      /**\n       * Configures mentions.\n      \n       */\n\n    }, {\n      key: \"mentions\",\n      get: function get() {\n        return this._getOption('mentions');\n      },\n      set: function set(value) {\n        this._setOption('mentions', value);\n      }\n      /**\n       * The value to be assigned to the `name` attribute of the underlying HTML element.\n      \n       */\n\n    }, {\n      key: \"name\",\n      get: function get() {\n        return this._getOption('name');\n      },\n      set: function set(value) {\n        this._setOption('name', value);\n      }\n      /**\n       * Specifies the text displayed when the input field is empty.\n      \n       */\n\n    }, {\n      key: \"placeholder\",\n      get: function get() {\n        return this._getOption('placeholder');\n      },\n      set: function set(value) {\n        this._setOption('placeholder', value);\n      }\n      /**\n       * Specifies whether the editor is read-only.\n      \n       */\n\n    }, {\n      key: \"readOnly\",\n      get: function get() {\n        return this._getOption('readOnly');\n      },\n      set: function set(value) {\n        this._setOption('readOnly', value);\n      }\n      /**\n       * Switches the UI component to a right-to-left representation.\n      \n       */\n\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        return this._getOption('rtlEnabled');\n      },\n      set: function set(value) {\n        this._setOption('rtlEnabled', value);\n      }\n      /**\n       * Specifies how the HtmlEditor&apos;s toolbar and content field are styled.\n      \n       */\n\n    }, {\n      key: \"stylingMode\",\n      get: function get() {\n        return this._getOption('stylingMode');\n      },\n      set: function set(value) {\n        this._setOption('stylingMode', value);\n      }\n      /**\n       * Specifies the number of the element when the Tab key is used for navigating.\n      \n       */\n\n    }, {\n      key: \"tabIndex\",\n      get: function get() {\n        return this._getOption('tabIndex');\n      },\n      set: function set(value) {\n        this._setOption('tabIndex', value);\n      }\n      /**\n       * Configures table context menu settings.\n      \n       */\n\n    }, {\n      key: \"tableContextMenu\",\n      get: function get() {\n        return this._getOption('tableContextMenu');\n      },\n      set: function set(value) {\n        this._setOption('tableContextMenu', value);\n      }\n      /**\n       * Configures table resize.\n      \n       */\n\n    }, {\n      key: \"tableResizing\",\n      get: function get() {\n        return this._getOption('tableResizing');\n      },\n      set: function set(value) {\n        this._setOption('tableResizing', value);\n      }\n      /**\n       * Configures the UI component&apos;s toolbar.\n      \n       */\n\n    }, {\n      key: \"toolbar\",\n      get: function get() {\n        return this._getOption('toolbar');\n      },\n      set: function set(value) {\n        this._setOption('toolbar', value);\n      }\n      /**\n       * Information on the broken validation rule. Contains the first item from the validationErrors array.\n      \n       */\n\n    }, {\n      key: \"validationError\",\n      get: function get() {\n        return this._getOption('validationError');\n      },\n      set: function set(value) {\n        this._setOption('validationError', value);\n      }\n      /**\n       * An array of the validation rules that failed.\n      \n       */\n\n    }, {\n      key: \"validationErrors\",\n      get: function get() {\n        return this._getOption('validationErrors');\n      },\n      set: function set(value) {\n        this._setOption('validationErrors', value);\n      }\n      /**\n       * Specifies how the message about the validation rules that are not satisfied by this editor&apos;s value is displayed.\n      \n       */\n\n    }, {\n      key: \"validationMessageMode\",\n      get: function get() {\n        return this._getOption('validationMessageMode');\n      },\n      set: function set(value) {\n        this._setOption('validationMessageMode', value);\n      }\n      /**\n       * Indicates or specifies the current validation status.\n      \n       */\n\n    }, {\n      key: \"validationStatus\",\n      get: function get() {\n        return this._getOption('validationStatus');\n      },\n      set: function set(value) {\n        this._setOption('validationStatus', value);\n      }\n      /**\n       * Specifies the UI component&apos;s value.\n      \n       */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._getOption('value');\n      },\n      set: function set(value) {\n        this._setOption('value', value);\n      }\n      /**\n       * Specifies in which markup language the value is stored.\n      \n       */\n\n    }, {\n      key: \"valueType\",\n      get: function get() {\n        return this._getOption('valueType');\n      },\n      set: function set(value) {\n        this._setOption('valueType', value);\n      }\n      /**\n       * Configures variables, which are placeholders to be replaced with actual values when processing text.\n      \n       */\n\n    }, {\n      key: \"variables\",\n      get: function get() {\n        return this._getOption('variables');\n      },\n      set: function set(value) {\n        this._setOption('variables', value);\n      }\n      /**\n       * Specifies whether the UI component is visible.\n      \n       */\n\n    }, {\n      key: \"visible\",\n      get: function get() {\n        return this._getOption('visible');\n      },\n      set: function set(value) {\n        this._setOption('visible', value);\n      }\n      /**\n       * Specifies the UI component&apos;s width.\n      \n       */\n\n    }, {\n      key: \"width\",\n      get: function get() {\n        return this._getOption('width');\n      },\n      set: function set(value) {\n        this._setOption('width', value);\n      }\n    }, {\n      key: \"change\",\n      value: function change(_) {}\n    }, {\n      key: \"mentionsChildren\",\n      get: function get() {\n        return this._getOption('mentions');\n      },\n      set: function set(value) {\n        this.setChildren('mentions', value);\n      }\n    }, {\n      key: \"_createInstance\",\n      value: function _createInstance(element, options) {\n        return new DxHtmlEditor(element, options);\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.eventHelper.lockedValueChangeEvent = true;\n        this.value = value;\n        this.eventHelper.lockedValueChangeEvent = false;\n      }\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.change = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.touched = fn;\n      }\n    }, {\n      key: \"_createWidget\",\n      value: function _createWidget(element) {\n        var _this2 = this;\n\n        _get(_getPrototypeOf(DxHtmlEditorComponent.prototype), \"_createWidget\", this).call(this, element);\n\n        this.instance.on('focusOut', function (e) {\n          _this2.eventHelper.fireNgEvent('onBlur', [e]);\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyWidget();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(DxHtmlEditorComponent.prototype), \"ngOnChanges\", this).call(this, changes);\n\n        this.setupChanges('mentions', changes);\n        this.setupChanges('validationErrors', changes);\n      }\n    }, {\n      key: \"setupChanges\",\n      value: function setupChanges(prop, changes) {\n        if (!(prop in this._optionsToUpdate)) {\n          this._idh.setup(prop, changes);\n        }\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        this._idh.doCheck('mentions');\n\n        this._idh.doCheck('validationErrors');\n\n        this._watcherHelper.checkWatchers();\n\n        _get(_getPrototypeOf(DxHtmlEditorComponent.prototype), \"ngDoCheck\", this).call(this);\n\n        _get(_getPrototypeOf(DxHtmlEditorComponent.prototype), \"clearChangedOptions\", this).call(this);\n      }\n    }, {\n      key: \"_setOption\",\n      value: function _setOption(name, value) {\n        var isSetup = this._idh.setupSingle(name, value);\n\n        var isChanged = this._idh.getChanges(name, value) !== null;\n\n        if (isSetup || isChanged) {\n          _get(_getPrototypeOf(DxHtmlEditorComponent.prototype), \"_setOption\", this).call(this, name, value);\n        }\n      }\n    }]);\n\n    return DxHtmlEditorComponent;\n  }(DxComponent);\n\n  DxHtmlEditorComponent.ɵfac = function DxHtmlEditorComponent_Factory(t) {\n    return new (t || DxHtmlEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  DxHtmlEditorComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DxHtmlEditorComponent,\n    selectors: [[\"dx-html-editor\"]],\n    contentQueries: function DxHtmlEditorComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiMentionComponent, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.mentionsChildren = _t);\n      }\n    },\n    hostBindings: function DxHtmlEditorComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"onBlur\", function DxHtmlEditorComponent_onBlur_HostBindingHandler($event) {\n          return ctx.touched($event);\n        })(\"valueChange\", function DxHtmlEditorComponent_valueChange_HostBindingHandler($event) {\n          return ctx.change($event);\n        });\n      }\n    },\n    inputs: {\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      allowSoftLineBreak: \"allowSoftLineBreak\",\n      customizeModules: \"customizeModules\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      focusStateEnabled: \"focusStateEnabled\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      isValid: \"isValid\",\n      mediaResizing: \"mediaResizing\",\n      mentions: \"mentions\",\n      name: \"name\",\n      placeholder: \"placeholder\",\n      readOnly: \"readOnly\",\n      rtlEnabled: \"rtlEnabled\",\n      stylingMode: \"stylingMode\",\n      tabIndex: \"tabIndex\",\n      tableContextMenu: \"tableContextMenu\",\n      tableResizing: \"tableResizing\",\n      toolbar: \"toolbar\",\n      validationError: \"validationError\",\n      validationErrors: \"validationErrors\",\n      validationMessageMode: \"validationMessageMode\",\n      validationStatus: \"validationStatus\",\n      value: \"value\",\n      valueType: \"valueType\",\n      variables: \"variables\",\n      visible: \"visible\",\n      width: \"width\"\n    },\n    outputs: {\n      onContentReady: \"onContentReady\",\n      onDisposing: \"onDisposing\",\n      onFocusIn: \"onFocusIn\",\n      onFocusOut: \"onFocusOut\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      onValueChanged: \"onValueChanged\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      allowSoftLineBreakChange: \"allowSoftLineBreakChange\",\n      customizeModulesChange: \"customizeModulesChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      isValidChange: \"isValidChange\",\n      mediaResizingChange: \"mediaResizingChange\",\n      mentionsChange: \"mentionsChange\",\n      nameChange: \"nameChange\",\n      placeholderChange: \"placeholderChange\",\n      readOnlyChange: \"readOnlyChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      stylingModeChange: \"stylingModeChange\",\n      tabIndexChange: \"tabIndexChange\",\n      tableContextMenuChange: \"tableContextMenuChange\",\n      tableResizingChange: \"tableResizingChange\",\n      toolbarChange: \"toolbarChange\",\n      validationErrorChange: \"validationErrorChange\",\n      validationErrorsChange: \"validationErrorsChange\",\n      validationMessageModeChange: \"validationMessageModeChange\",\n      validationStatusChange: \"validationStatusChange\",\n      valueChange: \"valueChange\",\n      valueTypeChange: \"valueTypeChange\",\n      variablesChange: \"variablesChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\",\n      onBlur: \"onBlur\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, CUSTOM_VALUE_ACCESSOR_PROVIDER, NestedOptionHost, IterableDifferHelper]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function DxHtmlEditorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  DxHtmlEditorComponent = __decorate([__param(7, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, TransferState, Object])], DxHtmlEditorComponent);\n  return DxHtmlEditorComponent;\n}();\n\nvar DxHtmlEditorModule = /*@__PURE__*/function () {\n  var DxHtmlEditorModule = /*#__PURE__*/_createClass(function DxHtmlEditorModule() {\n    _classCallCheck(this, DxHtmlEditorModule);\n  });\n\n  DxHtmlEditorModule.ɵfac = function DxHtmlEditorModule_Factory(t) {\n    return new (t || DxHtmlEditorModule)();\n  };\n\n  DxHtmlEditorModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DxHtmlEditorModule\n  });\n  DxHtmlEditorModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[DxoMediaResizingModule, DxiMentionModule, DxoTableContextMenuModule, DxiItemModule, DxoTableResizingModule, DxoToolbarModule, DxoVariablesModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoMediaResizingModule, DxiMentionModule, DxoTableContextMenuModule, DxiItemModule, DxoTableResizingModule, DxoToolbarModule, DxoVariablesModule, DxTemplateModule]\n  });\n  return DxHtmlEditorModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxHtmlEditorModule, {\n    declarations: function declarations() {\n      return [DxHtmlEditorComponent];\n    },\n    imports: function imports() {\n      return [DxoMediaResizingModule, DxiMentionModule, DxoTableContextMenuModule, DxiItemModule, DxoTableResizingModule, DxoToolbarModule, DxoVariablesModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule];\n    },\n    exports: function exports() {\n      return [DxHtmlEditorComponent, DxoMediaResizingModule, DxiMentionModule, DxoTableContextMenuModule, DxiItemModule, DxoTableResizingModule, DxoToolbarModule, DxoVariablesModule, DxTemplateModule];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DxHtmlEditorComponent, DxHtmlEditorModule }; //# sourceMappingURL=devextreme-angular-ui-html-editor.js.map","map":null,"metadata":{},"sourceType":"module"}