{"ast":null,"code":"import _classCallCheck from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';\nimport DxFileManager from 'devextreme/ui/file_manager';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoContextMenuModule, DxiItemModule, DxoItemViewModule, DxoDetailsModule, DxiColumnModule, DxoNotificationsModule, DxoPermissionsModule, DxoToolbarModule, DxiFileSelectionItemModule, DxoUploadModule } from 'devextreme-angular/ui/nested';\n/*!\n * devextreme-angular\n * Version: 21.2.6\n * Build date: Tue Mar 01 2022\n *\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-angular\n */\n\n/**\n * The FileManager is a UI component that allows users to upload, select, and manage files and directories in different file storages.\n\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'devextreme-angular/core';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nvar DxFileManagerComponent = /*@__PURE__*/function () {\n  var DxFileManagerComponent = /*#__PURE__*/function (_DxComponent) {\n    _inherits(DxFileManagerComponent, _DxComponent);\n\n    var _super = _createSuper(DxFileManagerComponent);\n\n    function DxFileManagerComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      var _this;\n\n      _classCallCheck(this, DxFileManagerComponent);\n\n      _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      _this._watcherHelper = _watcherHelper;\n      _this._idh = _idh;\n\n      _this._createEventEmitters([{\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'contextMenuItemClick',\n        emit: 'onContextMenuItemClick'\n      }, {\n        subscribe: 'contextMenuShowing',\n        emit: 'onContextMenuShowing'\n      }, {\n        subscribe: 'currentDirectoryChanged',\n        emit: 'onCurrentDirectoryChanged'\n      }, {\n        subscribe: 'directoryCreated',\n        emit: 'onDirectoryCreated'\n      }, {\n        subscribe: 'directoryCreating',\n        emit: 'onDirectoryCreating'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'errorOccurred',\n        emit: 'onErrorOccurred'\n      }, {\n        subscribe: 'fileUploaded',\n        emit: 'onFileUploaded'\n      }, {\n        subscribe: 'fileUploading',\n        emit: 'onFileUploading'\n      }, {\n        subscribe: 'focusedItemChanged',\n        emit: 'onFocusedItemChanged'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'itemCopied',\n        emit: 'onItemCopied'\n      }, {\n        subscribe: 'itemCopying',\n        emit: 'onItemCopying'\n      }, {\n        subscribe: 'itemDeleted',\n        emit: 'onItemDeleted'\n      }, {\n        subscribe: 'itemDeleting',\n        emit: 'onItemDeleting'\n      }, {\n        subscribe: 'itemDownloading',\n        emit: 'onItemDownloading'\n      }, {\n        subscribe: 'itemMoved',\n        emit: 'onItemMoved'\n      }, {\n        subscribe: 'itemMoving',\n        emit: 'onItemMoving'\n      }, {\n        subscribe: 'itemRenamed',\n        emit: 'onItemRenamed'\n      }, {\n        subscribe: 'itemRenaming',\n        emit: 'onItemRenaming'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'selectedFileOpened',\n        emit: 'onSelectedFileOpened'\n      }, {\n        subscribe: 'selectionChanged',\n        emit: 'onSelectionChanged'\n      }, {\n        subscribe: 'toolbarItemClick',\n        emit: 'onToolbarItemClick'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'allowedFileExtensionsChange'\n      }, {\n        emit: 'contextMenuChange'\n      }, {\n        emit: 'currentPathChange'\n      }, {\n        emit: 'currentPathKeysChange'\n      }, {\n        emit: 'customizeDetailColumnsChange'\n      }, {\n        emit: 'customizeThumbnailChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'fileSystemProviderChange'\n      }, {\n        emit: 'focusedItemKeyChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'itemViewChange'\n      }, {\n        emit: 'notificationsChange'\n      }, {\n        emit: 'permissionsChange'\n      }, {\n        emit: 'rootFolderNameChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'selectedItemKeysChange'\n      }, {\n        emit: 'selectionModeChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'toolbarChange'\n      }, {\n        emit: 'uploadChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      _this._idh.setHost(_assertThisInitialized(_this));\n\n      optionHost.setHost(_assertThisInitialized(_this));\n      return _this;\n    }\n    /**\n     * Specifies the shortcut key that sets focus on the UI component.\n    \n     */\n\n\n    _createClass(DxFileManagerComponent, [{\n      key: \"accessKey\",\n      get: function get() {\n        return this._getOption('accessKey');\n      },\n      set: function set(value) {\n        this._setOption('accessKey', value);\n      }\n      /**\n       * Specifies whether or not the UI component changes its state when interacting with a user.\n      \n       */\n\n    }, {\n      key: \"activeStateEnabled\",\n      get: function get() {\n        return this._getOption('activeStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('activeStateEnabled', value);\n      }\n      /**\n       * Specifies the allowed upload file extensions.\n      \n       */\n\n    }, {\n      key: \"allowedFileExtensions\",\n      get: function get() {\n        return this._getOption('allowedFileExtensions');\n      },\n      set: function set(value) {\n        this._setOption('allowedFileExtensions', value);\n      }\n      /**\n       * Configures the context menu settings.\n      \n       */\n\n    }, {\n      key: \"contextMenu\",\n      get: function get() {\n        return this._getOption('contextMenu');\n      },\n      set: function set(value) {\n        this._setOption('contextMenu', value);\n      }\n      /**\n       * Specifies the path that is used when the FileManager is initialized.\n      \n       */\n\n    }, {\n      key: \"currentPath\",\n      get: function get() {\n        return this._getOption('currentPath');\n      },\n      set: function set(value) {\n        this._setOption('currentPath', value);\n      }\n      /**\n       * Specifies an array of path keys to the current location.\n      \n       */\n\n    }, {\n      key: \"currentPathKeys\",\n      get: function get() {\n        return this._getOption('currentPathKeys');\n      },\n      set: function set(value) {\n        this._setOption('currentPathKeys', value);\n      }\n      /**\n       * Customizes columns in details view. Applies only if itemView.mode is &apos;details&apos;.\n      \n       */\n\n    }, {\n      key: \"customizeDetailColumns\",\n      get: function get() {\n        return this._getOption('customizeDetailColumns');\n      },\n      set: function set(value) {\n        this._setOption('customizeDetailColumns', value);\n      }\n      /**\n       * Allows you to provide custom icons to be used as thumbnails.\n      \n       */\n\n    }, {\n      key: \"customizeThumbnail\",\n      get: function get() {\n        return this._getOption('customizeThumbnail');\n      },\n      set: function set(value) {\n        this._setOption('customizeThumbnail', value);\n      }\n      /**\n       * Specifies whether the UI component responds to user interaction.\n      \n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._getOption('disabled');\n      },\n      set: function set(value) {\n        this._setOption('disabled', value);\n      }\n      /**\n       * Specifies the global attributes to be attached to the UI component&apos;s container element.\n      \n       */\n\n    }, {\n      key: \"elementAttr\",\n      get: function get() {\n        return this._getOption('elementAttr');\n      },\n      set: function set(value) {\n        this._setOption('elementAttr', value);\n      }\n      /**\n       * Specifies the file system provider.\n      \n       */\n\n    }, {\n      key: \"fileSystemProvider\",\n      get: function get() {\n        return this._getOption('fileSystemProvider');\n      },\n      set: function set(value) {\n        this._setOption('fileSystemProvider', value);\n      }\n      /**\n       * Specifies a key of the initially or currently focused item.\n      \n       */\n\n    }, {\n      key: \"focusedItemKey\",\n      get: function get() {\n        return this._getOption('focusedItemKey');\n      },\n      set: function set(value) {\n        this._setOption('focusedItemKey', value);\n      }\n      /**\n       * Specifies whether the UI component can be focused using keyboard navigation.\n      \n       */\n\n    }, {\n      key: \"focusStateEnabled\",\n      get: function get() {\n        return this._getOption('focusStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('focusStateEnabled', value);\n      }\n      /**\n       * Specifies the UI component&apos;s height.\n      \n       */\n\n    }, {\n      key: \"height\",\n      get: function get() {\n        return this._getOption('height');\n      },\n      set: function set(value) {\n        this._setOption('height', value);\n      }\n      /**\n       * Specifies text for a hint that appears when a user pauses on the UI component.\n      \n       */\n\n    }, {\n      key: \"hint\",\n      get: function get() {\n        return this._getOption('hint');\n      },\n      set: function set(value) {\n        this._setOption('hint', value);\n      }\n      /**\n       * Specifies whether the UI component changes its state when a user pauses on it.\n      \n       */\n\n    }, {\n      key: \"hoverStateEnabled\",\n      get: function get() {\n        return this._getOption('hoverStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('hoverStateEnabled', value);\n      }\n      /**\n       * Configures the file and directory view.\n      \n       */\n\n    }, {\n      key: \"itemView\",\n      get: function get() {\n        return this._getOption('itemView');\n      },\n      set: function set(value) {\n        this._setOption('itemView', value);\n      }\n      /**\n       * Configures notification settings.\n      \n       */\n\n    }, {\n      key: \"notifications\",\n      get: function get() {\n        return this._getOption('notifications');\n      },\n      set: function set(value) {\n        this._setOption('notifications', value);\n      }\n      /**\n       * Specifies actions that a user is allowed to perform on files and directories.\n      \n       */\n\n    }, {\n      key: \"permissions\",\n      get: function get() {\n        return this._getOption('permissions');\n      },\n      set: function set(value) {\n        this._setOption('permissions', value);\n      }\n      /**\n       * Specifies the root directory name.\n      \n       */\n\n    }, {\n      key: \"rootFolderName\",\n      get: function get() {\n        return this._getOption('rootFolderName');\n      },\n      set: function set(value) {\n        this._setOption('rootFolderName', value);\n      }\n      /**\n       * Switches the UI component to a right-to-left representation.\n      \n       */\n\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        return this._getOption('rtlEnabled');\n      },\n      set: function set(value) {\n        this._setOption('rtlEnabled', value);\n      }\n      /**\n       * Contains an array of initially or currently selected files and directories&apos; keys.\n      \n       */\n\n    }, {\n      key: \"selectedItemKeys\",\n      get: function get() {\n        return this._getOption('selectedItemKeys');\n      },\n      set: function set(value) {\n        this._setOption('selectedItemKeys', value);\n      }\n      /**\n       * Specifies whether a user can select a single or multiple files and directories in the item view simultaneously.\n      \n       */\n\n    }, {\n      key: \"selectionMode\",\n      get: function get() {\n        return this._getOption('selectionMode');\n      },\n      set: function set(value) {\n        this._setOption('selectionMode', value);\n      }\n      /**\n       * Specifies the number of the element when the Tab key is used for navigating.\n      \n       */\n\n    }, {\n      key: \"tabIndex\",\n      get: function get() {\n        return this._getOption('tabIndex');\n      },\n      set: function set(value) {\n        this._setOption('tabIndex', value);\n      }\n      /**\n       * Configures toolbar settings.\n      \n       */\n\n    }, {\n      key: \"toolbar\",\n      get: function get() {\n        return this._getOption('toolbar');\n      },\n      set: function set(value) {\n        this._setOption('toolbar', value);\n      }\n      /**\n       * Configures upload settings.\n      \n       */\n\n    }, {\n      key: \"upload\",\n      get: function get() {\n        return this._getOption('upload');\n      },\n      set: function set(value) {\n        this._setOption('upload', value);\n      }\n      /**\n       * Specifies whether the UI component is visible.\n      \n       */\n\n    }, {\n      key: \"visible\",\n      get: function get() {\n        return this._getOption('visible');\n      },\n      set: function set(value) {\n        this._setOption('visible', value);\n      }\n      /**\n       * Specifies the UI component&apos;s width.\n      \n       */\n\n    }, {\n      key: \"width\",\n      get: function get() {\n        return this._getOption('width');\n      },\n      set: function set(value) {\n        this._setOption('width', value);\n      }\n    }, {\n      key: \"_createInstance\",\n      value: function _createInstance(element, options) {\n        return new DxFileManager(element, options);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyWidget();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(DxFileManagerComponent.prototype), \"ngOnChanges\", this).call(this, changes);\n\n        this.setupChanges('allowedFileExtensions', changes);\n        this.setupChanges('currentPathKeys', changes);\n        this.setupChanges('selectedItemKeys', changes);\n      }\n    }, {\n      key: \"setupChanges\",\n      value: function setupChanges(prop, changes) {\n        if (!(prop in this._optionsToUpdate)) {\n          this._idh.setup(prop, changes);\n        }\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        this._idh.doCheck('allowedFileExtensions');\n\n        this._idh.doCheck('currentPathKeys');\n\n        this._idh.doCheck('selectedItemKeys');\n\n        this._watcherHelper.checkWatchers();\n\n        _get(_getPrototypeOf(DxFileManagerComponent.prototype), \"ngDoCheck\", this).call(this);\n\n        _get(_getPrototypeOf(DxFileManagerComponent.prototype), \"clearChangedOptions\", this).call(this);\n      }\n    }, {\n      key: \"_setOption\",\n      value: function _setOption(name, value) {\n        var isSetup = this._idh.setupSingle(name, value);\n\n        var isChanged = this._idh.getChanges(name, value) !== null;\n\n        if (isSetup || isChanged) {\n          _get(_getPrototypeOf(DxFileManagerComponent.prototype), \"_setOption\", this).call(this, name, value);\n        }\n      }\n    }]);\n\n    return DxFileManagerComponent;\n  }(DxComponent);\n\n  DxFileManagerComponent.ɵfac = function DxFileManagerComponent_Factory(t) {\n    return new (t || DxFileManagerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  DxFileManagerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DxFileManagerComponent,\n    selectors: [[\"dx-file-manager\"]],\n    inputs: {\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      allowedFileExtensions: \"allowedFileExtensions\",\n      contextMenu: \"contextMenu\",\n      currentPath: \"currentPath\",\n      currentPathKeys: \"currentPathKeys\",\n      customizeDetailColumns: \"customizeDetailColumns\",\n      customizeThumbnail: \"customizeThumbnail\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      fileSystemProvider: \"fileSystemProvider\",\n      focusedItemKey: \"focusedItemKey\",\n      focusStateEnabled: \"focusStateEnabled\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      itemView: \"itemView\",\n      notifications: \"notifications\",\n      permissions: \"permissions\",\n      rootFolderName: \"rootFolderName\",\n      rtlEnabled: \"rtlEnabled\",\n      selectedItemKeys: \"selectedItemKeys\",\n      selectionMode: \"selectionMode\",\n      tabIndex: \"tabIndex\",\n      toolbar: \"toolbar\",\n      upload: \"upload\",\n      visible: \"visible\",\n      width: \"width\"\n    },\n    outputs: {\n      onContentReady: \"onContentReady\",\n      onContextMenuItemClick: \"onContextMenuItemClick\",\n      onContextMenuShowing: \"onContextMenuShowing\",\n      onCurrentDirectoryChanged: \"onCurrentDirectoryChanged\",\n      onDirectoryCreated: \"onDirectoryCreated\",\n      onDirectoryCreating: \"onDirectoryCreating\",\n      onDisposing: \"onDisposing\",\n      onErrorOccurred: \"onErrorOccurred\",\n      onFileUploaded: \"onFileUploaded\",\n      onFileUploading: \"onFileUploading\",\n      onFocusedItemChanged: \"onFocusedItemChanged\",\n      onInitialized: \"onInitialized\",\n      onItemCopied: \"onItemCopied\",\n      onItemCopying: \"onItemCopying\",\n      onItemDeleted: \"onItemDeleted\",\n      onItemDeleting: \"onItemDeleting\",\n      onItemDownloading: \"onItemDownloading\",\n      onItemMoved: \"onItemMoved\",\n      onItemMoving: \"onItemMoving\",\n      onItemRenamed: \"onItemRenamed\",\n      onItemRenaming: \"onItemRenaming\",\n      onOptionChanged: \"onOptionChanged\",\n      onSelectedFileOpened: \"onSelectedFileOpened\",\n      onSelectionChanged: \"onSelectionChanged\",\n      onToolbarItemClick: \"onToolbarItemClick\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      allowedFileExtensionsChange: \"allowedFileExtensionsChange\",\n      contextMenuChange: \"contextMenuChange\",\n      currentPathChange: \"currentPathChange\",\n      currentPathKeysChange: \"currentPathKeysChange\",\n      customizeDetailColumnsChange: \"customizeDetailColumnsChange\",\n      customizeThumbnailChange: \"customizeThumbnailChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      fileSystemProviderChange: \"fileSystemProviderChange\",\n      focusedItemKeyChange: \"focusedItemKeyChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      itemViewChange: \"itemViewChange\",\n      notificationsChange: \"notificationsChange\",\n      permissionsChange: \"permissionsChange\",\n      rootFolderNameChange: \"rootFolderNameChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      selectedItemKeysChange: \"selectedItemKeysChange\",\n      selectionModeChange: \"selectionModeChange\",\n      tabIndexChange: \"tabIndexChange\",\n      toolbarChange: \"toolbarChange\",\n      uploadChange: \"uploadChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxFileManagerComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  DxFileManagerComponent = __decorate([__param(7, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, TransferState, Object])], DxFileManagerComponent);\n  return DxFileManagerComponent;\n}();\n\nvar DxFileManagerModule = /*@__PURE__*/function () {\n  var DxFileManagerModule = /*#__PURE__*/_createClass(function DxFileManagerModule() {\n    _classCallCheck(this, DxFileManagerModule);\n  });\n\n  DxFileManagerModule.ɵfac = function DxFileManagerModule_Factory(t) {\n    return new (t || DxFileManagerModule)();\n  };\n\n  DxFileManagerModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DxFileManagerModule\n  });\n  DxFileManagerModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[DxoContextMenuModule, DxiItemModule, DxoItemViewModule, DxoDetailsModule, DxiColumnModule, DxoNotificationsModule, DxoPermissionsModule, DxoToolbarModule, DxiFileSelectionItemModule, DxoUploadModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoContextMenuModule, DxiItemModule, DxoItemViewModule, DxoDetailsModule, DxiColumnModule, DxoNotificationsModule, DxoPermissionsModule, DxoToolbarModule, DxiFileSelectionItemModule, DxoUploadModule, DxTemplateModule]\n  });\n  return DxFileManagerModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxFileManagerModule, {\n    declarations: function declarations() {\n      return [DxFileManagerComponent];\n    },\n    imports: function imports() {\n      return [DxoContextMenuModule, DxiItemModule, DxoItemViewModule, DxoDetailsModule, DxiColumnModule, DxoNotificationsModule, DxoPermissionsModule, DxoToolbarModule, DxiFileSelectionItemModule, DxoUploadModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule];\n    },\n    exports: function exports() {\n      return [DxFileManagerComponent, DxoContextMenuModule, DxiItemModule, DxoItemViewModule, DxoDetailsModule, DxiColumnModule, DxoNotificationsModule, DxoPermissionsModule, DxoToolbarModule, DxiFileSelectionItemModule, DxoUploadModule, DxTemplateModule];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DxFileManagerComponent, DxFileManagerModule }; //# sourceMappingURL=devextreme-angular-ui-file-manager.js.map","map":null,"metadata":{},"sourceType":"module"}