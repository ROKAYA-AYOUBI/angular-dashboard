{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Directive, HostListener, Input, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar NgxPrintDirective = /*@__PURE__*/function () {\n  var NgxPrintDirective = /*#__PURE__*/function () {\n    function NgxPrintDirective() {\n      _classCallCheck(this, NgxPrintDirective);\n\n      this._printStyle = [];\n      /**\n       *\n       *\n       * \\@memberof NgxPrintDirective\n       */\n\n      this.useExistingCss = false;\n      /**\n       * A delay in milliseconds to force the print dialog to wait before opened. Default: 0\n       *\n       * \\@memberof NgxPrintDirective\n       */\n\n      this.printDelay = 0;\n      /**\n       *\n       *\n       * @return html for the given tag\n       *\n       * \\@memberof NgxPrintDirective\n       */\n\n      this._styleSheetFile = '';\n    }\n    /**\n     *\n     *\n     * \\@memberof NgxPrintDirective\n     * @param {?} values\n     * @return {?}\n     */\n\n\n    _createClass(NgxPrintDirective, [{\n      key: \"printStyle\",\n      set: function set(values) {\n        for (var key in values) {\n          if (values.hasOwnProperty(key)) {\n            this._printStyle.push((key + JSON.stringify(values[key])).replace(/['\"]+/g, ''));\n          }\n        }\n\n        this.returnStyleValues();\n      }\n      /**\n       *\n       *\n       * \\@memberof NgxPrintDirective\n       * @return {?} the string that create the stylesheet which will be injected\n       * later within <style></style> tag.\n       *\n       * -join/replace to transform an array objects to css-styled string\n       *\n       */\n\n    }, {\n      key: \"returnStyleValues\",\n      value: function returnStyleValues() {\n        return \"<style> \".concat(this._printStyle.join(' ').replace(/,/g, ';'), \" </style>\");\n      }\n      /**\n       * \\@memberof NgxPrintDirective\n       * @param {?} cssList\n       * @return {?}\n       */\n\n    }, {\n      key: \"styleSheetFile\",\n      set: function set(cssList) {\n        /** @type {?} */\n        var linkTagFn =\n        /**\n        * @param {?} cssFileName\n        * @return {?}\n        */\n        function linkTagFn(cssFileName) {\n          return \"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"\".concat(cssFileName, \"\\\">\");\n        };\n\n        if (cssList.indexOf(',') !== -1) {\n          /** @type {?} */\n          var valueArr = cssList.split(',');\n\n          var _iterator = _createForOfIteratorHelper(valueArr),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var val = _step.value;\n              this._styleSheetFile = this._styleSheetFile + linkTagFn(val);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        } else {\n          this._styleSheetFile = linkTagFn(cssList);\n        }\n      }\n      /**\n       * @private\n       * @return {?} string which contains the link tags containing the css which will\n       * be injected later within <head></head> tag.\n       *\n       */\n\n    }, {\n      key: \"returnStyleSheetLinkTags\",\n      value: function returnStyleSheetLinkTags() {\n        return this._styleSheetFile;\n      }\n      /**\n       * @private\n       * @param {?} tag\n       * @return {?}\n       */\n\n    }, {\n      key: \"getElementTag\",\n      value: function getElementTag(tag) {\n        /** @type {?} */\n        var html = [];\n        /** @type {?} */\n\n        var elements = document.getElementsByTagName(tag);\n\n        for (var index = 0; index < elements.length; index++) {\n          html.push(elements[index].outerHTML);\n        }\n\n        return html.join('\\r\\n');\n      }\n      /**\n       *\n       * @private\n       * @param {?} data the html element collection to save defaults to\n       *\n       * @return {?}\n       */\n\n    }, {\n      key: \"getFormData\",\n      value: function getFormData(data) {\n        for (var i = 0; i < data.length; i++) {\n          data[i].defaultValue = data[i].value;\n\n          if (data[i].checked) {\n            data[i].defaultChecked = true;\n          }\n        }\n      }\n      /**\n       * @private\n       * @return {?} html section to be printed along with some associated inputs\n       *\n       */\n\n    }, {\n      key: \"getHtmlContents\",\n      value: function getHtmlContents() {\n        /** @type {?} */\n        var printContents = document.getElementById(this.printSectionId);\n        /** @type {?} */\n\n        var innards = printContents.getElementsByTagName('input');\n        this.getFormData(innards);\n        /** @type {?} */\n\n        var txt = printContents.getElementsByTagName('textarea');\n        this.getFormData(txt);\n        return printContents.innerHTML;\n      }\n      /**\n       *\n       *\n       * \\@memberof NgxPrintDirective\n       * @return {?}\n       */\n\n    }, {\n      key: \"print\",\n      value: function print() {\n        /** @type {?} */\n        var printContents;\n        /** @type {?} */\n\n        var popupWin;\n        /** @type {?} */\n\n        var styles = '';\n        /** @type {?} */\n\n        var links = '';\n        /** @type {?} */\n\n        var baseTag = this.getElementTag('base');\n\n        if (this.useExistingCss) {\n          styles = this.getElementTag('style');\n          links = this.getElementTag('link');\n        }\n\n        printContents = this.getHtmlContents();\n        popupWin = window.open(\"\", \"_blank\", \"top=0,left=0,height=auto,width=auto\");\n        popupWin.document.open();\n        popupWin.document.write(\"\\n      <html>\\n        <head>\\n          <title>\".concat(this.printTitle ? this.printTitle : \"\", \"</title>\\n          \").concat(baseTag, \"\\n          \").concat(this.returnStyleValues(), \"\\n          \").concat(this.returnStyleSheetLinkTags(), \"\\n          \").concat(styles, \"\\n          \").concat(links, \"\\n        </head>\\n        <body>\\n          \").concat(printContents, \"\\n          <script defer>\\n            function triggerPrint(event) {\\n              window.removeEventListener('load', triggerPrint, false);\\n              setTimeout(function() {\\n                closeWindow(window.print());\\n              }, \").concat(this.printDelay, \");\\n            }\\n            function closeWindow(){\\n                window.close();\\n            }\\n            window.addEventListener('load', triggerPrint, false);\\n          </script>\\n        </body>\\n      </html>\"));\n        popupWin.document.close();\n      }\n    }]);\n\n    return NgxPrintDirective;\n  }();\n\n  NgxPrintDirective.ɵfac = function NgxPrintDirective_Factory(t) {\n    return new (t || NgxPrintDirective)();\n  };\n\n  NgxPrintDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NgxPrintDirective,\n    selectors: [[\"button\", \"ngxPrint\", \"\"]],\n    hostBindings: function NgxPrintDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function NgxPrintDirective_click_HostBindingHandler() {\n          return ctx.print();\n        });\n      }\n    },\n    inputs: {\n      useExistingCss: \"useExistingCss\",\n      printDelay: \"printDelay\",\n      printStyle: \"printStyle\",\n      styleSheetFile: \"styleSheetFile\",\n      printSectionId: \"printSectionId\",\n      printTitle: \"printTitle\"\n    }\n  });\n  return NgxPrintDirective;\n}();\n\nvar NgxPrintModule = /*@__PURE__*/function () {\n  var NgxPrintModule = /*#__PURE__*/_createClass(function NgxPrintModule() {\n    _classCallCheck(this, NgxPrintModule);\n  });\n\n  NgxPrintModule.ɵfac = function NgxPrintModule_Factory(t) {\n    return new (t || NgxPrintModule)();\n  };\n\n  NgxPrintModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxPrintModule\n  });\n  NgxPrintModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return NgxPrintModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxPrintModule, {\n    declarations: [NgxPrintDirective],\n    exports: [NgxPrintDirective]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { NgxPrintDirective, NgxPrintModule }; //# sourceMappingURL=ngx-print.js.map","map":null,"metadata":{},"sourceType":"module"}