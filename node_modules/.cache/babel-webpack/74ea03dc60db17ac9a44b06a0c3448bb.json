{"ast":null,"code":"import _classCallCheck from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/rokia/Documents/GitHub/argon-dashboard-pro-angular-v1.3.0/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';\nimport DxDraggable from 'devextreme/ui/draggable';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoCursorOffsetModule } from 'devextreme-angular/ui/nested';\n/*!\n * devextreme-angular\n * Version: 21.2.6\n * Build date: Tue Mar 01 2022\n *\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-angular\n */\n\n/**\n * Draggable is a user interface utility that allows UI component elements to be dragged and dropped.\n\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'devextreme-angular/core';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar _c0 = [\"*\"];\n\nvar DxDraggableComponent = /*@__PURE__*/function () {\n  var DxDraggableComponent = /*#__PURE__*/function (_DxComponent) {\n    _inherits(DxDraggableComponent, _DxComponent);\n\n    var _super = _createSuper(DxDraggableComponent);\n\n    function DxDraggableComponent(elementRef, ngZone, templateHost, _watcherHelper, optionHost, transferState, platformId) {\n      var _this;\n\n      _classCallCheck(this, DxDraggableComponent);\n\n      _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n\n      _this._createEventEmitters([{\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'dragEnd',\n        emit: 'onDragEnd'\n      }, {\n        subscribe: 'dragMove',\n        emit: 'onDragMove'\n      }, {\n        subscribe: 'dragStart',\n        emit: 'onDragStart'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        emit: 'autoScrollChange'\n      }, {\n        emit: 'boundaryChange'\n      }, {\n        emit: 'cloneChange'\n      }, {\n        emit: 'containerChange'\n      }, {\n        emit: 'cursorOffsetChange'\n      }, {\n        emit: 'dataChange'\n      }, {\n        emit: 'dragDirectionChange'\n      }, {\n        emit: 'dragTemplateChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'groupChange'\n      }, {\n        emit: 'handleChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'scrollSensitivityChange'\n      }, {\n        emit: 'scrollSpeedChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      optionHost.setHost(_assertThisInitialized(_this));\n      return _this;\n    }\n    /**\n     * Enables automatic scrolling while dragging an item beyond the viewport.\n    \n     */\n\n\n    _createClass(DxDraggableComponent, [{\n      key: \"autoScroll\",\n      get: function get() {\n        return this._getOption('autoScroll');\n      },\n      set: function set(value) {\n        this._setOption('autoScroll', value);\n      }\n      /**\n       * Specifies a DOM element that limits the dragging area.\n      \n       */\n\n    }, {\n      key: \"boundary\",\n      get: function get() {\n        return this._getOption('boundary');\n      },\n      set: function set(value) {\n        this._setOption('boundary', value);\n      }\n      /**\n       * Allows a user to drag clones of items instead of actual items.\n      \n       */\n\n    }, {\n      key: \"clone\",\n      get: function get() {\n        return this._getOption('clone');\n      },\n      set: function set(value) {\n        this._setOption('clone', value);\n      }\n      /**\n       * Specifies a custom container in which the draggable item should be rendered.\n      \n       */\n\n    }, {\n      key: \"container\",\n      get: function get() {\n        return this._getOption('container');\n      },\n      set: function set(value) {\n        this._setOption('container', value);\n      }\n      /**\n       * Specifies the cursor offset from the dragged item.\n      \n       */\n\n    }, {\n      key: \"cursorOffset\",\n      get: function get() {\n        return this._getOption('cursorOffset');\n      },\n      set: function set(value) {\n        this._setOption('cursorOffset', value);\n      }\n      /**\n       * A container for custom data.\n      \n       */\n\n    }, {\n      key: \"data\",\n      get: function get() {\n        return this._getOption('data');\n      },\n      set: function set(value) {\n        this._setOption('data', value);\n      }\n      /**\n       * Specifies the directions in which an item can be dragged.\n      \n       */\n\n    }, {\n      key: \"dragDirection\",\n      get: function get() {\n        return this._getOption('dragDirection');\n      },\n      set: function set(value) {\n        this._setOption('dragDirection', value);\n      }\n      /**\n       * Specifies custom markup to be shown instead of the item being dragged.\n      \n       */\n\n    }, {\n      key: \"dragTemplate\",\n      get: function get() {\n        return this._getOption('dragTemplate');\n      },\n      set: function set(value) {\n        this._setOption('dragTemplate', value);\n      }\n      /**\n       * Specifies the global attributes to be attached to the UI component&apos;s container element.\n      \n       */\n\n    }, {\n      key: \"elementAttr\",\n      get: function get() {\n        return this._getOption('elementAttr');\n      },\n      set: function set(value) {\n        this._setOption('elementAttr', value);\n      }\n      /**\n       * Allows you to group several UI components, so that users can drag and drop items between them.\n      \n       */\n\n    }, {\n      key: \"group\",\n      get: function get() {\n        return this._getOption('group');\n      },\n      set: function set(value) {\n        this._setOption('group', value);\n      }\n      /**\n       * Specifies a CSS selector (ID or class) that should act as the drag handle(s) for the item(s).\n      \n       */\n\n    }, {\n      key: \"handle\",\n      get: function get() {\n        return this._getOption('handle');\n      },\n      set: function set(value) {\n        this._setOption('handle', value);\n      }\n      /**\n       * Specifies the UI component&apos;s height.\n      \n       */\n\n    }, {\n      key: \"height\",\n      get: function get() {\n        return this._getOption('height');\n      },\n      set: function set(value) {\n        this._setOption('height', value);\n      }\n      /**\n       * Switches the UI component to a right-to-left representation.\n      \n       */\n\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        return this._getOption('rtlEnabled');\n      },\n      set: function set(value) {\n        this._setOption('rtlEnabled', value);\n      }\n      /**\n       * Specifies the distance in pixels from the edge of viewport at which scrolling should start. Applies only if autoScroll is true.\n      \n       */\n\n    }, {\n      key: \"scrollSensitivity\",\n      get: function get() {\n        return this._getOption('scrollSensitivity');\n      },\n      set: function set(value) {\n        this._setOption('scrollSensitivity', value);\n      }\n      /**\n       * Specifies the scrolling speed when dragging an item beyond the viewport. Applies only if autoScroll is true.\n      \n       */\n\n    }, {\n      key: \"scrollSpeed\",\n      get: function get() {\n        return this._getOption('scrollSpeed');\n      },\n      set: function set(value) {\n        this._setOption('scrollSpeed', value);\n      }\n      /**\n       * Specifies the UI component&apos;s width.\n      \n       */\n\n    }, {\n      key: \"width\",\n      get: function get() {\n        return this._getOption('width');\n      },\n      set: function set(value) {\n        this._setOption('width', value);\n      }\n    }, {\n      key: \"_createInstance\",\n      value: function _createInstance(element, options) {\n        return new DxDraggable(element, options);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyWidget();\n      }\n    }]);\n\n    return DxDraggableComponent;\n  }(DxComponent);\n\n  DxDraggableComponent.ɵfac = function DxDraggableComponent_Factory(t) {\n    return new (t || DxDraggableComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  DxDraggableComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DxDraggableComponent,\n    selectors: [[\"dx-draggable\"]],\n    inputs: {\n      autoScroll: \"autoScroll\",\n      boundary: \"boundary\",\n      clone: \"clone\",\n      container: \"container\",\n      cursorOffset: \"cursorOffset\",\n      data: \"data\",\n      dragDirection: \"dragDirection\",\n      dragTemplate: \"dragTemplate\",\n      elementAttr: \"elementAttr\",\n      group: \"group\",\n      handle: \"handle\",\n      height: \"height\",\n      rtlEnabled: \"rtlEnabled\",\n      scrollSensitivity: \"scrollSensitivity\",\n      scrollSpeed: \"scrollSpeed\",\n      width: \"width\"\n    },\n    outputs: {\n      onDisposing: \"onDisposing\",\n      onDragEnd: \"onDragEnd\",\n      onDragMove: \"onDragMove\",\n      onDragStart: \"onDragStart\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      autoScrollChange: \"autoScrollChange\",\n      boundaryChange: \"boundaryChange\",\n      cloneChange: \"cloneChange\",\n      containerChange: \"containerChange\",\n      cursorOffsetChange: \"cursorOffsetChange\",\n      dataChange: \"dataChange\",\n      dragDirectionChange: \"dragDirectionChange\",\n      dragTemplateChange: \"dragTemplateChange\",\n      elementAttrChange: \"elementAttrChange\",\n      groupChange: \"groupChange\",\n      handleChange: \"handleChange\",\n      heightChange: \"heightChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      scrollSensitivityChange: \"scrollSensitivityChange\",\n      scrollSpeedChange: \"scrollSpeedChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function DxDraggableComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  DxDraggableComponent = __decorate([__param(6, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost, WatcherHelper, NestedOptionHost, TransferState, Object])], DxDraggableComponent);\n  return DxDraggableComponent;\n}();\n\nvar DxDraggableModule = /*@__PURE__*/function () {\n  var DxDraggableModule = /*#__PURE__*/_createClass(function DxDraggableModule() {\n    _classCallCheck(this, DxDraggableModule);\n  });\n\n  DxDraggableModule.ɵfac = function DxDraggableModule_Factory(t) {\n    return new (t || DxDraggableModule)();\n  };\n\n  DxDraggableModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DxDraggableModule\n  });\n  DxDraggableModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[DxoCursorOffsetModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoCursorOffsetModule, DxTemplateModule]\n  });\n  return DxDraggableModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxDraggableModule, {\n    declarations: function declarations() {\n      return [DxDraggableComponent];\n    },\n    imports: function imports() {\n      return [DxoCursorOffsetModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule];\n    },\n    exports: function exports() {\n      return [DxDraggableComponent, DxoCursorOffsetModule, DxTemplateModule];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DxDraggableComponent, DxDraggableModule }; //# sourceMappingURL=devextreme-angular-ui-draggable.js.map","map":null,"metadata":{},"sourceType":"module"}