{"ast":null,"code":"var naturalSort = require('string-natural-compare'),\n    getByClass = require('./utils/get-by-class'),\n    extend = require('./utils/extend'),\n    indexOf = require('./utils/index-of'),\n    events = require('./utils/events'),\n    toString = require('./utils/to-string'),\n    classes = require('./utils/classes'),\n    getAttribute = require('./utils/get-attribute'),\n    toArray = require('./utils/to-array');\n\nmodule.exports = function (id, options, values) {\n  var self = this,\n      init,\n      Item = require('./item')(self),\n      addAsync = require('./add-async')(self),\n      initPagination = require('./pagination')(self);\n\n  init = {\n    start: function start() {\n      self.listClass = 'list';\n      self.searchClass = 'search';\n      self.sortClass = 'sort';\n      self.page = 10000;\n      self.i = 1;\n      self.items = [];\n      self.visibleItems = [];\n      self.matchingItems = [];\n      self.searched = false;\n      self.filtered = false;\n      self.searchColumns = undefined;\n      self.searchDelay = 0;\n      self.handlers = {\n        updated: []\n      };\n      self.valueNames = [];\n      self.utils = {\n        getByClass: getByClass,\n        extend: extend,\n        indexOf: indexOf,\n        events: events,\n        toString: toString,\n        naturalSort: naturalSort,\n        classes: classes,\n        getAttribute: getAttribute,\n        toArray: toArray\n      };\n      self.utils.extend(self, options);\n      self.listContainer = typeof id === 'string' ? document.getElementById(id) : id;\n\n      if (!self.listContainer) {\n        return;\n      }\n\n      self.list = getByClass(self.listContainer, self.listClass, true);\n      self.parse = require('./parse')(self);\n      self.templater = require('./templater')(self);\n      self.search = require('./search')(self);\n      self.filter = require('./filter')(self);\n      self.sort = require('./sort')(self);\n      self.fuzzySearch = require('./fuzzy-search')(self, options.fuzzySearch);\n      this.handlers();\n      this.items();\n      this.pagination();\n      self.update();\n    },\n    handlers: function handlers() {\n      for (var handler in self.handlers) {\n        if (self[handler] && self.handlers.hasOwnProperty(handler)) {\n          self.on(handler, self[handler]);\n        }\n      }\n    },\n    items: function items() {\n      self.parse(self.list);\n\n      if (values !== undefined) {\n        self.add(values);\n      }\n    },\n    pagination: function pagination() {\n      if (options.pagination !== undefined) {\n        if (options.pagination === true) {\n          options.pagination = [{}];\n        }\n\n        if (options.pagination[0] === undefined) {\n          options.pagination = [options.pagination];\n        }\n\n        for (var i = 0, il = options.pagination.length; i < il; i++) {\n          initPagination(options.pagination[i]);\n        }\n      }\n    }\n  };\n  /*\n   * Re-parse the List, use if html have changed\n   */\n\n  this.reIndex = function () {\n    self.items = [];\n    self.visibleItems = [];\n    self.matchingItems = [];\n    self.searched = false;\n    self.filtered = false;\n    self.parse(self.list);\n  };\n\n  this.toJSON = function () {\n    var json = [];\n\n    for (var i = 0, il = self.items.length; i < il; i++) {\n      json.push(self.items[i].values());\n    }\n\n    return json;\n  };\n  /*\n   * Add object to list\n   */\n\n\n  this.add = function (values, callback) {\n    if (values.length === 0) {\n      return;\n    }\n\n    if (callback) {\n      addAsync(values.slice(0), callback);\n      return;\n    }\n\n    var added = [],\n        notCreate = false;\n\n    if (values[0] === undefined) {\n      values = [values];\n    }\n\n    for (var i = 0, il = values.length; i < il; i++) {\n      var item = null;\n      notCreate = self.items.length > self.page ? true : false;\n      item = new Item(values[i], undefined, notCreate);\n      self.items.push(item);\n      added.push(item);\n    }\n\n    self.update();\n    return added;\n  };\n\n  this.show = function (i, page) {\n    this.i = i;\n    this.page = page;\n    self.update();\n    return self;\n  };\n  /* Removes object from list.\n   * Loops through the list and removes objects where\n   * property \"valuename\" === value\n   */\n\n\n  this.remove = function (valueName, value, options) {\n    var found = 0;\n\n    for (var i = 0, il = self.items.length; i < il; i++) {\n      if (self.items[i].values()[valueName] == value) {\n        self.templater.remove(self.items[i], options);\n        self.items.splice(i, 1);\n        il--;\n        i--;\n        found++;\n      }\n    }\n\n    self.update();\n    return found;\n  };\n  /* Gets the objects in the list which\n   * property \"valueName\" === value\n   */\n\n\n  this.get = function (valueName, value) {\n    var matchedItems = [];\n\n    for (var i = 0, il = self.items.length; i < il; i++) {\n      var item = self.items[i];\n\n      if (item.values()[valueName] == value) {\n        matchedItems.push(item);\n      }\n    }\n\n    return matchedItems;\n  };\n  /*\n   * Get size of the list\n   */\n\n\n  this.size = function () {\n    return self.items.length;\n  };\n  /*\n   * Removes all items from the list\n   */\n\n\n  this.clear = function () {\n    self.templater.clear();\n    self.items = [];\n    return self;\n  };\n\n  this.on = function (event, callback) {\n    self.handlers[event].push(callback);\n    return self;\n  };\n\n  this.off = function (event, callback) {\n    var e = self.handlers[event];\n    var index = indexOf(e, callback);\n\n    if (index > -1) {\n      e.splice(index, 1);\n    }\n\n    return self;\n  };\n\n  this.trigger = function (event) {\n    var i = self.handlers[event].length;\n\n    while (i--) {\n      self.handlers[event][i](self);\n    }\n\n    return self;\n  };\n\n  this.reset = {\n    filter: function filter() {\n      var is = self.items,\n          il = is.length;\n\n      while (il--) {\n        is[il].filtered = false;\n      }\n\n      return self;\n    },\n    search: function search() {\n      var is = self.items,\n          il = is.length;\n\n      while (il--) {\n        is[il].found = false;\n      }\n\n      return self;\n    }\n  };\n\n  this.update = function () {\n    var is = self.items,\n        il = is.length;\n    self.visibleItems = [];\n    self.matchingItems = [];\n    self.templater.clear();\n\n    for (var i = 0; i < il; i++) {\n      if (is[i].matching() && self.matchingItems.length + 1 >= self.i && self.visibleItems.length < self.page) {\n        is[i].show();\n        self.visibleItems.push(is[i]);\n        self.matchingItems.push(is[i]);\n      } else if (is[i].matching()) {\n        self.matchingItems.push(is[i]);\n        is[i].hide();\n      } else {\n        is[i].hide();\n      }\n    }\n\n    self.trigger('updated');\n    return self;\n  };\n\n  init.start();\n};","map":null,"metadata":{},"sourceType":"script"}